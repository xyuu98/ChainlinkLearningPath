{
    "address": "0xC243790F5db9159861A0138362fA2336Da424BAD",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "uint64",
                    "name": "_subscriptionId",
                    "type": "uint64"
                },
                {
                    "internalType": "address",
                    "name": "vrfCoordinator",
                    "type": "address"
                },
                {
                    "internalType": "bytes32",
                    "name": "_keyHash",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "have",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "want",
                    "type": "address"
                }
            ],
            "name": "OnlyCoordinatorCanFulfill",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256[]",
                    "name": "randomWords",
                    "type": "uint256[]"
                }
            ],
            "name": "ReturnedRandomness",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "requestId",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256[]",
                    "name": "randomWords",
                    "type": "uint256[]"
                }
            ],
            "name": "rawFulfillRandomWords",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "requestRandomWords",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "s_randomWords",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "s_requestId",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        }
    ],
    "transactionHash": "0x07f6a4cfa43344b45a4f531118704a79f5312347edb4f4b289bf10d359f1d905",
    "receipt": {
        "to": null,
        "from": "0x45821AF32F0368fEeb7686c4CC10B7215E00Ab04",
        "contractAddress": "0xC243790F5db9159861A0138362fA2336Da424BAD",
        "transactionIndex": 44,
        "gasUsed": "809547",
        "logsBloom": "0x
        "blockHash": "0x060f9538293e9a705b63ca514edddcdc253ec3b23fcf5802c34a258e8b003d15",
        "transactionHash": "0x07f6a4cfa43344b45a4f531118704a79f5312347edb4f4b289bf10d359f1d905",
        "logs": [],
        "blockNumber": 8810878,
        "cumulativeGasUsed": "8011876",
        "status": 1,
        "byzantium": true
    },
    "args": [
        "5338",
        "0x2ca8e0c643bde4c2e08ab1fa0da3401adad7734d",
        "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15"
    ],
    "numDeployments": 1,
    "solcInputHash": "f39436f832c1deff76edaa2e8d8a3c62",
    "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"ReturnedRandomness\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_randomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"\\u6b65\\u9aa4 2 - \\u5728\\u6784\\u9020\\u51fd\\u6570\\u4e2d\\uff0c\\u521d\\u59cb\\u5316\\u76f8\\u5173\\u53d8\\u91cf COORDINATOR\\uff0cs_subscriptionId \\u548c s_keyHash \"},\"requestRandomWords()\":{\"notice\":\"\\u6b65\\u9aa4 3 - \\u53d1\\u9001\\u968f\\u673a\\u6570\\u8bf7\\u6c42 \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VRFTask.sol\":\"VRFTask\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/VRFTask.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\n/*\\n * \\u4efb\\u52a1 2\\uff1a\\n * \\u901a\\u8fc7 requestRandomWords \\u51fd\\u6570\\uff0c\\u4ece Chainlink VRF \\u83b7\\u5f97\\u968f\\u673a\\u6570\\n * \\u901a\\u8fc7 fulfillRandomWords \\u51fd\\u6570\\u7ed9 s_randomness[] \\u586b\\u5165 5 \\u4e2a\\u968f\\u673a\\u6570\\n * \\u4fdd\\u8bc1 5 \\u4e2a\\u968f\\u673a\\u6570\\u4e3a 5 \\u4ee5\\u5185\\uff0c\\u5e76\\u4e14\\u4e0d\\u91cd\\u590d\\n * \\u53c2\\u8003\\u89c6\\u9891\\u6559\\u7a0b\\uff1a https://www.bilibili.com/video/BV1ed4y1N7Uv\\n *\\n * \\u4efb\\u52a1 2 \\u5b8c\\u6210\\u6807\\u5fd7\\uff1a\\n * 1. \\u901a\\u8fc7\\u547d\\u4ee4 \\\"yarn hardhat test\\\" \\u4f7f\\u5f97\\u5355\\u5143\\u6d4b\\u8bd5 8-10 \\u901a\\u8fc7\\n * 2. \\u901a\\u8fc7 Remix \\u5728 goerli \\u6d4b\\u8bd5\\u7f51\\u90e8\\u7f72\\uff0c\\u5e76\\u4e14\\u6d4b\\u8bd5\\u6267\\u884c\\u662f\\u5426\\u5982\\u9884\\u671f\\n */\\n\\ncontract VRFTask is VRFConsumerBaseV2 {\\n    VRFCoordinatorV2Interface immutable COORDINATOR;\\n\\n    /*\\n     * \\u6b65\\u9aa4 1 - \\u83b7\\u5f97 VRFCoordinator \\u5408\\u7ea6\\u7684\\u5730\\u5740\\u548c\\u6240\\u5bf9\\u5e94\\u7684 keyHash\\n     * \\u4fee\\u6539\\u53d8\\u91cf\\n     *   CALL_BACK_LIMIT\\uff1a\\u56de\\u8c03\\u51fd\\u6570\\u6700\\u5927 gas \\u6570\\u91cf\\n     *   REQUEST_CONFIRMATIONS\\uff1a\\u6700\\u5c0f\\u786e\\u8ba4\\u533a\\u5757\\u6570\\n     *   NUM_WORDS\\uff1a\\u5355\\u6b21\\u7533\\u8bf7\\u968f\\u673a\\u6570\\u7684\\u6570\\u91cf\\n     *\\n     * \\u6ce8\\u610f\\uff1a\\n     * \\u901a\\u8fc7 Remix \\u90e8\\u7f72\\u5728\\u975e\\u672c\\u5730\\u73af\\u5883\\u65f6\\uff0c\\u76f8\\u5173\\u53c2\\u6570\\u8bf7\\u67e5\\u770b\\n     * https://docs.chain.link/docs/vrf/v2/supported-networks/\\uff0c\\u83b7\\u53d6 keyHash \\u7684\\u503c\\u548c vrfCoordinator \\u7684\\u5730\\u5740\\n     * \\u672c\\u5730\\u73af\\u5883\\u5728\\u6d4b\\u8bd5\\u811a\\u672c\\u4e2d\\u5df2\\u7ecf\\u81ea\\u52a8\\u914d\\u7f6e\\n     *\\n     */\\n\\n    // Chainlink VRF \\u5728\\u63a5\\u6536\\u5230\\u8bf7\\u6c42\\u540e\\uff0c\\u4f1a\\u901a\\u8fc7 fulfillRandomWords \\u5c06\\u6570\\u636e\\u5199\\u56de\\u5230\\u7528\\u6237\\u5408\\u7ea6\\uff0c\\u6b64\\u8fc7\\u7a0b\\u9700\\u8981\\u6d88\\u8017 gas\\n    // CALL_BACK_LIMIT \\u662f\\u56de\\u8c03\\u51fd\\u6570\\u53ef\\u4ee5\\u6d88\\u8017\\u7684\\u6700\\u5927 gas\\uff0c\\u6839\\u636e\\u56de\\u8c03\\u51fd\\u6570\\u7684\\u903b\\u8f91\\u9002\\u5f53\\u8c03\\u6574 CALL_BACK_LIMIT\\n    // \\u8be6\\u60c5\\u8bf7\\u67e5\\u770b\\uff1ahttps://docs.chain.link/vrf/v2/subscription/examples/get-a-random-number#analyzing-the-contract\\n    uint32 constant CALL_BACK_LIMIT = 200_000;\\n\\n    // Chainlink VRF \\u5728\\u8fd4\\u56de\\u968f\\u673a\\u6570\\u4e4b\\u524d\\u5e94\\u8be5\\u7b49\\u5f85\\u7684 Confirmation\\uff0c\\u503c\\u8d8a\\u5927\\uff0c\\u8fd4\\u56de\\u7684\\u503c\\u8d8a\\u5b89\\u5168\\n    uint16 constant REQUEST_CONFIRMATIONS = 3;\\n\\n    // Chainlink VRF \\u5728\\u6bcf\\u6b21\\u8bf7\\u6c42\\u540e\\u8fd4\\u56de\\u7684\\u968f\\u673a\\u6570\\u6570\\u91cf\\n    uint32 constant NUM_WORDS = 1;\\n\\n    // \\u975e\\u672c\\u5730\\u73af\\u5883\\u90e8\\u7f72\\uff0c\\u6784\\u9020\\u51fd\\u6570\\u9700\\u8981\\u5bf9 s_subscriptionId \\u548c s_keyHash \\u8d4b\\u503c\\uff08\\u672c\\u5730\\u6d4b\\u8bd5\\u65f6\\u4e0d\\u9700\\u8981\\u914d\\u7f6e\\uff09\\n    // s_subscriptionId \\u662f VRF subscription ID\\uff08\\u8ba2\\u9605 ID\\uff09\\n    // \\u5728\\u8fd9\\u91cc\\u521b\\u5efa\\u5e76\\u4e14\\u83b7\\u5f97 subscription id https://vrf.chain.link/\\n    uint64 immutable s_subscriptionId;\\n    // s_keyHash \\u662f VRF \\u7684 gas Lane\\uff0c\\u51b3\\u5b9a\\u56de\\u8c03\\u65f6\\u6240\\u4f7f\\u7528\\u7684 gas price\\n    // \\u5728\\u8fd9\\u91cc\\u67e5\\u770b  https://docs.chain.link/vrf/v2/subscription/supported-networks\\n    bytes32 immutable s_keyHash;\\n\\n    uint256[] public s_randomWords;\\n    uint256 public s_requestId;\\n\\n    address s_owner;\\n\\n    event ReturnedRandomness(uint256[] randomWords);\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == s_owner);\\n        _;\\n    }\\n\\n    /**\\n     * \\u6b65\\u9aa4 2 - \\u5728\\u6784\\u9020\\u51fd\\u6570\\u4e2d\\uff0c\\u521d\\u59cb\\u5316\\u76f8\\u5173\\u53d8\\u91cf\\n     * COORDINATOR\\uff0cs_subscriptionId \\u548c s_keyHash\\n     * */\\n    constructor(\\n        uint64 _subscriptionId,\\n        address vrfCoordinator,\\n        bytes32 _keyHash\\n    ) VRFConsumerBaseV2(vrfCoordinator) {\\n        s_owner = msg.sender;\\n\\n        //\\u4fee\\u6539\\u4ee5\\u4e0b solidity \\u4ee3\\u7801\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\n        s_subscriptionId = _subscriptionId;\\n        s_keyHash = _keyHash;\\n    }\\n\\n    /**\\n     * \\u6b65\\u9aa4 3 - \\u53d1\\u9001\\u968f\\u673a\\u6570\\u8bf7\\u6c42\\n     * */\\n    function requestRandomWords() external onlyOwner {\\n        //\\u5728\\u6b64\\u6dfb\\u52a0\\u5e76\\u4e14\\u4fee\\u6539 solidity \\u4ee3\\u7801\\n        require(msg.sender == s_owner);\\n        s_requestId = COORDINATOR.requestRandomWords(\\n            s_keyHash,\\n            s_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            CALL_BACK_LIMIT,\\n            NUM_WORDS\\n        );\\n    }\\n\\n    /**\\n     * \\u6b65\\u9aa4 4 - \\u63a5\\u53d7\\u968f\\u673a\\u6570\\uff0c\\u5b8c\\u6210\\u903b\\u8f91\\u83b7\\u53d6 5 \\u4e2a 5 \\u4ee5\\u5185**\\u4e0d\\u91cd\\u590d**\\u7684\\u968f\\u673a\\u6570\\n     * \\u5173\\u4e8e\\u5982\\u4f55\\u4f7f\\u5f97\\u83b7\\u53d6\\u7684\\u968f\\u673a\\u6570\\u4e0d\\u91cd\\u590d\\uff0c\\u6e05\\u53c2\\u8003\\u4ee5\\u4e0b\\u4ee3\\u7801\\n     * https://gist.github.com/cleanunicorn/d27484a2488e0eecec8ce23a0ad4f20b\\n     *  */\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        uint[] memory result = new uint[](5);\\n\\n        // \\u521d\\u59cb\\u5316\\u6570\\u7ec4\\n        for (uint i = 0; i < 5; i++) {\\n            result[i] = i + 1;\\n        }\\n\\n        // VRF\\u83b7\\u5f97\\u7684\\u968f\\u673a\\u6570\\u4f5c\\u4e3a\\u71b5\\uff0c\\u6839\\u636e\\u63d0\\u4f9b\\u7684\\u71b5\\u8bbe\\u7f6e\\u521d\\u59cb\\u968f\\u673a\\u6027\\n        bytes32 random = keccak256(abi.encodePacked(_randomWords[0]));\\n\\n        // \\u8bbe\\u7f6e\\u5c06\\u88ab\\u4ea4\\u6362\\u7684\\u6570\\u7ec4\\u7684\\u6700\\u540e\\u4e00\\u9879\\n        uint last_item = 4;\\n\\n        // \\u6211\\u4eec\\u9700\\u8981\\u8fdb\\u884c `size - 1` \\u6b21\\u8fed\\u4ee3\\u6765\\u5b8c\\u5168\\u6253\\u4e71\\u6570\\u7ec4\\n        for (uint i = 1; i < 4; i++) {\\n            // \\u6839\\u636e\\u968f\\u673a\\u6027\\u9009\\u62e9\\u4e00\\u4e2a\\u6570\\u5b57\\n            uint selected_item = uint(random) % last_item;\\n\\n            // \\u4ea4\\u6362\\u9879\\u76ee`selected_item <> last_item`\\n            uint aux = result[last_item];\\n            result[last_item] = result[selected_item];\\n            result[selected_item] = aux;\\n\\n            // \\u51cf\\u5c11\\u53ef\\u80fd\\u6d17\\u724c\\u7684\\u5927\\u5c0f\\n            // \\u4fdd\\u7559\\u5df2\\u7ecf\\u6d17\\u724c\\u7684\\u9879\\u76ee\\n            // \\u5df2\\u7ecf\\u6d17\\u724c\\u7684\\u9879\\u76ee\\u5728\\u6570\\u7ec4\\u7684\\u672b\\u5c3e\\n            last_item--;\\n\\n            // \\u4ea7\\u751f\\u65b0\\u7684\\u968f\\u673a\\u6027\\n            random = keccak256(abi.encodePacked(random));\\n        }\\n        s_randomWords = result;\\n        emit ReturnedRandomness(s_randomWords);\\n    }\\n}\\n\",\"keccak256\":\"0x18ee5b19346ec32ed9deb16704262a4c8fb8a51e30264c3860ce940d9f7b95b8\"}},\"version\":1}",
    "bytecode": "",
    "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80631fe543e314610051578063e0c862891461006d578063e89e106a14610077578063f6eaffc814610095575b600080fd5b61006b60048036038101906100669190610795565b6100c5565b005b610075610185565b005b61007f610339565b60405161008c9190610800565b60405180910390f35b6100af60048036038101906100aa919061081b565b61033f565b6040516100bc9190610800565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461017757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161016e929190610889565b60405180910390fd5b6101818282610363565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101df57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461023957600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600362030d4060016040518663ffffffff1660e01b81526004016102df95949392919061092a565b602060405180830381600087803b1580156102f957600080fd5b505af115801561030d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103319190610992565b600181905550565b60015481565b6000818154811061034f57600080fd5b906000526020600020016000915090505481565b6000600567ffffffffffffffff8111156103805761037f610652565b5b6040519080825280602002602001820160405280156103ae5781602001602082028036833780820191505090505b50905060005b60058110156103fc576001816103ca91906109ee565b8282815181106103dd576103dc610a44565b5b60200260200101818152505080806103f490610a73565b9150506103b4565b5060008260008151811061041357610412610a44565b5b602002602001015160405160200161042b9190610add565b6040516020818303038152906040528051906020012090506000600490506000600190505b6004811015610531576000828460001c61046a9190610b27565b9050600085848151811061048157610480610a44565b5b6020026020010151905085828151811061049e5761049d610a44565b5b60200260200101518685815181106104b9576104b8610a44565b5b602002602001018181525050808683815181106104d9576104d8610a44565b5b60200260200101818152505083806104f090610b58565b945050846040516020016105049190610ba3565b6040516020818303038152906040528051906020012094505050808061052990610a73565b915050610450565b508260009080519060200190610548929190610588565b507fefb16d61046900da527008568620fb9f8420e2f5ed4de3bfbded5035c9362b0e60006040516105799190610ccc565b60405180910390a15050505050565b8280548282559060005260206000209081019282156105c4579160200282015b828111156105c35782518255916020019190600101906105a8565b5b5090506105d191906105d5565b5090565b5b808211156105ee5760008160009055506001016105d6565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61061981610606565b811461062457600080fd5b50565b60008135905061063681610610565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61068a82610641565b810181811067ffffffffffffffff821117156106a9576106a8610652565b5b80604052505050565b60006106bc6105f2565b90506106c88282610681565b919050565b600067ffffffffffffffff8211156106e8576106e7610652565b5b602082029050602081019050919050565b600080fd5b600061071161070c846106cd565b6106b2565b90508083825260208201905060208402830185811115610734576107336106f9565b5b835b8181101561075d57806107498882610627565b845260208401935050602081019050610736565b5050509392505050565b600082601f83011261077c5761077b61063c565b5b813561078c8482602086016106fe565b91505092915050565b600080604083850312156107ac576107ab6105fc565b5b60006107ba85828601610627565b925050602083013567ffffffffffffffff8111156107db576107da610601565b5b6107e785828601610767565b9150509250929050565b6107fa81610606565b82525050565b600060208201905061081560008301846107f1565b92915050565b600060208284031215610831576108306105fc565b5b600061083f84828501610627565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061087382610848565b9050919050565b61088381610868565b82525050565b600060408201905061089e600083018561087a565b6108ab602083018461087a565b9392505050565b6000819050919050565b6108c5816108b2565b82525050565b600067ffffffffffffffff82169050919050565b6108e8816108cb565b82525050565b600061ffff82169050919050565b610905816108ee565b82525050565b600063ffffffff82169050919050565b6109248161090b565b82525050565b600060a08201905061093f60008301886108bc565b61094c60208301876108df565b61095960408301866108fc565b610966606083018561091b565b610973608083018461091b565b9695505050505050565b60008151905061098c81610610565b92915050565b6000602082840312156109a8576109a76105fc565b5b60006109b68482850161097d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109f982610606565b9150610a0483610606565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a3957610a386109bf565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a7e82610606565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ab157610ab06109bf565b5b600182019050919050565b6000819050919050565b610ad7610ad282610606565b610abc565b82525050565b6000610ae98284610ac6565b60208201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b3282610606565b9150610b3d83610606565b925082610b4d57610b4c610af8565b5b828206905092915050565b6000610b6382610606565b91506000821415610b7757610b766109bf565b5b600182039050919050565b6000819050919050565b610b9d610b98826108b2565b610b82565b82525050565b6000610baf8284610b8c565b60208201915081905092915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b610bf881610606565b82525050565b6000610c0a8383610bef565b60208301905092915050565b60008160001c9050919050565b6000819050919050565b6000610c40610c3b83610c16565b610c23565b9050919050565b6000610c538254610c2d565b9050919050565b6000600182019050919050565b6000610c7282610bbe565b610c7c8185610bc9565b9350610c8783610bda565b8060005b83811015610cbf57610c9c82610c47565b610ca68882610bfe565b9750610cb183610c5a565b925050600181019050610c8b565b5085935050505092915050565b60006020820190508181036000830152610ce68184610c67565b90509291505056fea26469706673582212204cedb2226f98db2d54828b86dfd7954010933ff020fe08d94624a20fa2ca2b6164736f6c63430008090033",
    "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "constructor": {
                "notice": "步骤 2 - 在构造函数中，初始化相关变量 COORDINATOR，s_subscriptionId 和 s_keyHash "
            },
            "requestRandomWords()": {
                "notice": "步骤 3 - 发送随机数请求 "
            }
        },
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 178,
                "contract": "contracts/VRFTask.sol:VRFTask",
                "label": "s_randomWords",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_uint256)dyn_storage"
            },
            {
                "astId": 180,
                "contract": "contracts/VRFTask.sol:VRFTask",
                "label": "s_requestId",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
            },
            {
                "astId": 182,
                "contract": "contracts/VRFTask.sol:VRFTask",
                "label": "s_owner",
                "offset": 0,
                "slot": "2",
                "type": "t_address"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
                "base": "t_uint256",
                "encoding": "dynamic_array",
                "label": "uint256[]",
                "numberOfBytes": "32"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
