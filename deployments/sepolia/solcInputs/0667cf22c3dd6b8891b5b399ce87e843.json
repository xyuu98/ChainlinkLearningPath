{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/AutomationBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/AutomationCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AutomationBase.sol\";\nimport \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "contracts/AutomationTask.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\";\n\n/*\n * 任务 3 内容，试想一个小游戏，一个数组位置角色的生命值（healthPoint）\n * HP 初始值为 1000，每次攻击（fight）会降低 100。\n *\n * 满足以下两个条件就可以通过 Automation 补充为 1000：\n * 1. 如果生命值不足 1000\n * 2. 经过一个时间间隔 interval\n * 请完成以下代码，实现上述逻辑\n *\n * 参考视频教程：https://www.bilibili.com/video/BV1ed4y1N7Uv?p=9\n *\n * 任务 3 完成标志：\n * 1. 通过命令 \"yarn hardhat test\" 使得单元测试 11-12 通过\n * 2. 通过 Remix 在 goerli 测试网部署，并且测试执行是否如预期\n */\n\ncontract AutomationTask is AutomationCompatible {\n    uint256 public constant SIZE = 10;\n    uint256 public constant MAXIMUM_HEALTH = 1000;\n    uint256[SIZE] public healthPoint;\n    uint256 public lastTimeStamp;\n    uint256 public immutable interval;\n\n    /*\n     * 步骤 1 - 在构造函数中完成数组 healthPoint 的初始化\n     */\n    constructor(uint256 _interval) {\n        lastTimeStamp = block.timestamp;\n        interval = _interval;\n        //在此添加 solidity 代码\n        for (uint i = 0; i < SIZE; i++) {\n            healthPoint[i] = MAXIMUM_HEALTH;\n        }\n    }\n\n    /*\n     * 步骤 2 - 定义 fight 函数\n     * 使得用户可以通过 fight 函数改变数组中的生命值\n     */\n    function fight(uint256 fighter) public {\n        //在此添加 solidity 代码\n        require(fighter <= SIZE - 1, \"Over SIZE!\");\n        healthPoint[fighter] -= 100;\n    }\n\n    /*\n     * 步骤 3 - 通过 checkUpKeep 来检测：\n     * 1. 数组 healthPoint 中的数值是否小于 1000\n     * 2. 是否经过了时间间隔 interval\n     *\n     * 注意：\n     * 这部分操作将由 Chainlink 预言机节点在链下计算，本地环境中已由脚本配置\n     * 可以尝试在 checkUpKeep 函数中改变状态，观察是否会发生改变\n     */\n    function checkUpkeep(\n        bytes memory /* checkData*/\n    )\n        public\n        view\n        override\n        returns (bool upkeepNeeded, bytes memory /*performData*/)\n    {\n        //在此添加和修改 solidity 代码\n        upkeepNeeded = false;\n        for (uint256 i = 0; i < SIZE && !upkeepNeeded; i++) {\n            if (\n                healthPoint[i] < MAXIMUM_HEALTH ||\n                lastTimeStamp + interval >= block.timestamp\n            ) {\n                upkeepNeeded = true;\n            }\n        }\n        return (upkeepNeeded, \"\");\n    }\n\n    /*\n     * 步骤 4 - 通过 performUpKeep 来完成将补足数组中生命值的操作\n     * 例如发现 healthPoint[0] = 500，则将其增加 500 变为 1000\n     *\n     * 注意：\n     * 可以通过 performData 使用 checkUpkeep 的运算结果，减少 gas 费用\n     */\n    function performUpkeep(bytes memory /*performData*/) external override {\n        //在此添加 solidity 代码\n        for (uint i = 0; i < SIZE; i++) {\n            if (healthPoint[i] < MAXIMUM_HEALTH) {\n                healthPoint[i] = MAXIMUM_HEALTH;\n            }\n        }\n    }\n}\n"
    },
    "contracts/VRFTask.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\n\n/*\n * 任务 2：\n * 通过 requestRandomWords 函数，从 Chainlink VRF 获得随机数\n * 通过 fulfillRandomWords 函数给 s_randomness[] 填入 5 个随机数\n * 保证 5 个随机数为 5 以内，并且不重复\n * 参考视频教程： https://www.bilibili.com/video/BV1ed4y1N7Uv\n *\n * 任务 2 完成标志：\n * 1. 通过命令 \"yarn hardhat test\" 使得单元测试 8-10 通过\n * 2. 通过 Remix 在 goerli 测试网部署，并且测试执行是否如预期\n */\n\ncontract VRFTask is VRFConsumerBaseV2 {\n    VRFCoordinatorV2Interface immutable COORDINATOR;\n\n    /*\n     * 步骤 1 - 获得 VRFCoordinator 合约的地址和所对应的 keyHash\n     * 修改变量\n     *   CALL_BACK_LIMIT：回调函数最大 gas 数量\n     *   REQUEST_CONFIRMATIONS：最小确认区块数\n     *   NUM_WORDS：单次申请随机数的数量\n     *\n     * 注意：\n     * 通过 Remix 部署在非本地环境时，相关参数请查看\n     * https://docs.chain.link/docs/vrf/v2/supported-networks/，获取 keyHash 的值和 vrfCoordinator 的地址\n     * 本地环境在测试脚本中已经自动配置\n     *\n     */\n\n    // Chainlink VRF 在接收到请求后，会通过 fulfillRandomWords 将数据写回到用户合约，此过程需要消耗 gas\n    // CALL_BACK_LIMIT 是回调函数可以消耗的最大 gas，根据回调函数的逻辑适当调整 CALL_BACK_LIMIT\n    // 详情请查看：https://docs.chain.link/vrf/v2/subscription/examples/get-a-random-number#analyzing-the-contract\n    uint32 constant CALL_BACK_LIMIT = 200_000;\n\n    // Chainlink VRF 在返回随机数之前应该等待的 Confirmation，值越大，返回的值越安全\n    uint16 constant REQUEST_CONFIRMATIONS = 3;\n\n    // Chainlink VRF 在每次请求后返回的随机数数量\n    uint32 constant NUM_WORDS = 1;\n\n    // 非本地环境部署，构造函数需要对 s_subscriptionId 和 s_keyHash 赋值（本地测试时不需要配置）\n    // s_subscriptionId 是 VRF subscription ID（订阅 ID）\n    // 在这里创建并且获得 subscription id https://vrf.chain.link/\n    uint64 immutable s_subscriptionId;\n    // s_keyHash 是 VRF 的 gas Lane，决定回调时所使用的 gas price\n    // 在这里查看  https://docs.chain.link/vrf/v2/subscription/supported-networks\n    bytes32 immutable s_keyHash;\n\n    uint256[] public s_randomWords;\n    uint256 public s_requestId;\n\n    address s_owner;\n\n    event ReturnedRandomness(uint256[] randomWords);\n\n    modifier onlyOwner() {\n        require(msg.sender == s_owner);\n        _;\n    }\n\n    /**\n     * 步骤 2 - 在构造函数中，初始化相关变量\n     * COORDINATOR，s_subscriptionId 和 s_keyHash\n     * */\n    constructor(\n        uint64 _subscriptionId,\n        address vrfCoordinator,\n        bytes32 _keyHash\n    ) VRFConsumerBaseV2(vrfCoordinator) {\n        s_owner = msg.sender;\n\n        //修改以下 solidity 代码\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\n        s_subscriptionId = _subscriptionId;\n        s_keyHash = _keyHash;\n    }\n\n    /**\n     * 步骤 3 - 发送随机数请求\n     * */\n    function requestRandomWords() external onlyOwner {\n        //在此添加并且修改 solidity 代码\n        require(msg.sender == s_owner);\n        s_requestId = COORDINATOR.requestRandomWords(\n            s_keyHash,\n            s_subscriptionId,\n            REQUEST_CONFIRMATIONS,\n            CALL_BACK_LIMIT,\n            NUM_WORDS\n        );\n    }\n\n    /**\n     * 步骤 4 - 接受随机数，完成逻辑获取 5 个 5 以内**不重复**的随机数\n     * 关于如何使得获取的随机数不重复，清参考以下代码\n     * https://gist.github.com/cleanunicorn/d27484a2488e0eecec8ce23a0ad4f20b\n     *  */\n    function fulfillRandomWords(\n        uint256 requestId,\n        uint256[] memory _randomWords\n    ) internal override {\n        uint[] memory result = new uint[](5);\n\n        // 初始化数组\n        for (uint i = 0; i < 5; i++) {\n            result[i] = i + 1;\n        }\n\n        // VRF获得的随机数作为熵，根据提供的熵设置初始随机性\n        bytes32 random = keccak256(abi.encodePacked(_randomWords[0]));\n\n        // 设置将被交换的数组的最后一项\n        uint last_item = 4;\n\n        // 我们需要进行 `size - 1` 次迭代来完全打乱数组\n        for (uint i = 1; i < 4; i++) {\n            // 根据随机性选择一个数字\n            uint selected_item = uint(random) % last_item;\n\n            // 交换项目`selected_item <> last_item`\n            uint aux = result[last_item];\n            result[last_item] = result[selected_item];\n            result[selected_item] = aux;\n\n            // 减少可能洗牌的大小\n            // 保留已经洗牌的项目\n            // 已经洗牌的项目在数组的末尾\n            last_item--;\n\n            // 产生新的随机性\n            random = keccak256(abi.encodePacked(random));\n        }\n        s_randomWords = result;\n        emit ReturnedRandomness(s_randomWords);\n    }\n}\n\n// VRFTask deployed at 0xC243790F5db9159861A0138362fA2336Da424BAD\n// Successfully verified contract DataFeedTask on Etherscan.\n// https://goerli.etherscan.io/address/0xc243790f5db9159861a0138362fa2336da424bad#code\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}