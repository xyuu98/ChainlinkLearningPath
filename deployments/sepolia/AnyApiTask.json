{
  "address": "0x50DBc4C27A817BEfb34697490F0988215B28b0B7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "volume",
          "type": "uint256"
        }
      ],
      "name": "DataFulfilled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_volume",
          "type": "uint256"
        }
      ],
      "name": "fulfill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestVolume",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "volume",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc894120ecc450b5dd6646ed18c8600d7424ba5433d17ad43cbd34b06169dd26f",
  "receipt": {
    "to": null,
    "from": "0x45821AF32F0368fEeb7686c4CC10B7215E00Ab04",
    "contractAddress": "0x50DBc4C27A817BEfb34697490F0988215B28b0B7",
    "transactionIndex": 31,
    "gasUsed": "1551588",
    "logsBloom": "0x
    "blockHash": "0x29509557a1c3b99ea60cec0de5bc5c51f98b03cb15619b687060efb390eabede",
    "transactionHash": "0xc894120ecc450b5dd6646ed18c8600d7424ba5433d17ad43cbd34b06169dd26f",
    "logs": [],
    "blockNumber": 3279549,
    "cumulativeGasUsed": "7501355",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6090149792dAAeE9D1D568c9f9a6F6B46AA29eFD",
    "100000000000000000",
    "0x779877A7B0D9E8603169DdbD7836e478b4624789"
  ],
  "numDeployments": 1,
  "solcInputHash": "b7ca39983cbeb28ab2e7c5443123a6f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"name\":\"DataFulfilled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_volume\",\"type\":\"uint256\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestVolume\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AnyApiTask.sol\":\"AnyApiTask\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"contracts/AnyApiTask.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\n\\n/*\\n * \\u4efb\\u52a1 4 \\u5185\\u5bb9\\uff0c\\u53d1\\u9001\\u4e00\\u4e2a Chainlink request\\uff0c\\u4ece\\u5916\\u90e8\\u83b7\\u53d6\\u4e00\\u4e2a\\u6570\\u636e\\n *\\n * \\u53c2\\u8003\\u89c6\\u9891\\u6559\\u7a0b\\uff1ahttps://www.bilibili.com/video/BV1ed4y1N7Uv?p=13\\n *\\n * \\u4efb\\u52a1 4 \\u5b8c\\u6210\\u6807\\u5fd7\\uff1a\\n * 1. \\u901a\\u8fc7\\u547d\\u4ee4 \\\"yarn hardhat test\\\" \\u4f7f\\u5f97\\u5355\\u5143\\u6d4b\\u8bd5 11-12 \\u901a\\u8fc7\\n * 2. \\u901a\\u8fc7 Remix \\u5728 goerli \\u6d4b\\u8bd5\\u7f51\\u90e8\\u7f72\\uff0c\\u5e76\\u4e14\\u6d4b\\u8bd5\\u6267\\u884c\\u662f\\u5426\\u5982\\u9884\\u671f\\n */\\ncontract AnyApiTask is ChainlinkClient {\\n    using Chainlink for Chainlink.Request;\\n\\n    uint256 public volume;\\n    address private immutable oracle;\\n    bytes32 private immutable jobId;\\n    uint256 private immutable fee;\\n\\n    event DataFulfilled(uint256 volume);\\n\\n    constructor(\\n        address _oracle,\\n        /*bytes32 _jobId,*/ uint256 _fee,\\n        address _link\\n    ) {\\n        if (_link == address(0)) {\\n            setPublicChainlinkToken();\\n        } else {\\n            setChainlinkToken(_link);\\n        }\\n        oracle = _oracle;\\n        jobId = \\\"ca98366cc7314957b8c012c72f05aeeb\\\";\\n        fee = _fee;\\n    }\\n\\n    /*\\n     * \\u6b65\\u9aa4 1 - \\u6784\\u5efa\\u4e00\\u4e2a Chainlink request\\n     * \\u901a\\u8fc7 requestVolume \\u51fd\\u6570\\uff0c\\u7ed9 Chainlink \\u53d1\\u9001\\u83b7\\u53d6\\u5916\\u90e8\\u6570\\u636e\\u8bf7\\u6c42\\n     */\\n    function requestVolume() public returns (bytes32 requestId) {\\n        Chainlink.Request memory request = buildChainlinkRequest(\\n            jobId,\\n            address(this),\\n            this.fulfill.selector\\n        );\\n\\n        request.add(\\n            \\\"get\\\",\\n            \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD\\\"\\n        );\\n        request.add(\\\"path\\\", \\\"RAW,ETH,USD,VOLUME24HOUR\\\");\\n\\n        int256 timesAmount = 10 ** 18;\\n        request.addInt(\\\"times\\\", timesAmount);\\n\\n        return sendChainlinkRequest(request, fee);\\n        //\\u6784\\u5efa Chainlink request\\n        /**\\n         * \\u5728\\u8fd9\\u91cc\\u6dfb\\u52a0\\u4ee3\\u7801\\uff0c\\u5728\\u672c\\u5730\\u7f51\\u7edc\\u4e2d\\u53ef\\u4ee5\\u4f7f\\u7528\\u975e\\u771f\\u5b9e\\u7684 API \\u4ee5\\u53ca\\u76f8\\u5173\\u4fe1\\u606f\\n         * \\u5982\\u679c\\u5728\\u6d4b\\u8bd5\\u7f51\\u4e2d\\uff0c\\u9700\\u8981\\u4f7f\\u7528\\u771f\\u5b9e url \\u548c path\\uff0c\\n         * \\u53ef\\u4ee5\\u53c2\\u8003\\u6b64\\u5904\\u4ee3\\u7801\\uff1ahttps://docs.chain.link/any-api/get-request/examples/single-word-response\\n         * **/\\n    }\\n\\n    /*\\n     * \\u6b65\\u9aa4 2 - \\u63a5\\u53d7 Chainlink \\u8fd4\\u56de\\u7684\\u6570\\u636e\\n     * \\u901a\\u8fc7 fulfill \\u51fd\\u6570\\uff0c\\u4ece\\u5916\\u90e8 API \\u83b7\\u5f97\\u4e00\\u4e2a\\u6570\\u636e\\n     */\\n    function fulfill(\\n        bytes32 _requestId,\\n        uint256 _volume\\n    ) public recordChainlinkFulfillment(_requestId) {\\n        /**\\n         * \\u5728\\u8fd9\\u91cc\\u6dfb\\u52a0\\u4ee3\\u7801\\uff0c\\u5728\\u672c\\u5730\\u7f51\\u7edc\\u4e2d\\u53ef\\u4ee5\\u4f7f\\u7528\\u4efb\\u610f\\u4e00\\u4e2a API\\n         * \\u5956 _volume \\u5b58\\u50a8\\u5728 volume \\u4e2d\\n         * \\u53ef\\u4ee5\\u53c2\\u8003\\u6b64\\u5904\\u4ee3\\u7801\\uff1ahttps://docs.chain.link/any-api/get-request/examples/single-word-response\\n         * **/\\n        emit DataFulfilled(volume);\\n        volume = _volume;\\n    }\\n\\n    function withdrawLink() external {\\n        LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\\n        require(\\n            link.transfer(msg.sender, link.balanceOf(address(this))),\\n            \\\"Unable to transfer\\\"\\n        );\\n    }\\n}\\n\\n// AnyApiTask deployed at 0x985Bf66598e9C3875B245b1d67d024e0D2cE2db3\\n// https://goerli.etherscan.io/address/0x985Bf66598e9C3875B245b1d67d024e0D2cE2db3#code\\n\",\"keccak256\":\"0x45bc05473dc6b24df66c8af919c485b40cb6222f6c9a9fffa3e86b94e878db5c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405260016004553480156200001657600080fd5b5060405162001d7438038062001d7483398181016040528101906200003c919062000298565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200008857620000826200010760201b60201c565b6200009a565b6200009981620001af60201b60201c565b5b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250507f636139383336366363373331343935376238633031326337326630356165656260a081815250508160c0818152505050505062000326565b620001ad73c89bd4e1632d3a43cb03aaad5262cbe4038bc57173ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff1660e01b815260040160206040518083038186803b1580156200016657600080fd5b505afa1580156200017b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a19190620002f4565b620001af60201b60201c565b565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022582620001f8565b9050919050565b620002378162000218565b81146200024357600080fd5b50565b60008151905062000257816200022c565b92915050565b6000819050919050565b62000272816200025d565b81146200027e57600080fd5b50565b600081519050620002928162000267565b92915050565b600080600060608486031215620002b457620002b3620001f3565b5b6000620002c48682870162000246565b9350506020620002d78682870162000281565b9250506040620002ea8682870162000246565b9150509250925092565b6000602082840312156200030d576200030c620001f3565b5b60006200031d8482850162000246565b91505092915050565b60805160a05160c051611a226200035260003960006102280152600060bb015260005050611a226000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631c365472146100515780634357855e1461006f5780638dc654a21461008b578063c618a1e414610095575b600080fd5b6100596100b3565b6040516100669190610fdf565b60405180910390f35b61008960048036038101906100849190611061565b610253565b005b61009361039d565b005b61009d610500565b6040516100aa91906110b0565b60405180910390f35b6000806100e87f000000000000000000000000000000000000000000000000000000000000000030634357855e60e01b610506565b905061014c6040518060400160405280600381526020017f67657400000000000000000000000000000000000000000000000000000000008152506040518060800160405280604981526020016119a460499139836105379092919063ffffffff16565b6101cb6040518060400160405280600481526020017f70617468000000000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f5241572c4554482c5553442c564f4c554d453234484f55520000000000000000815250836105379092919063ffffffff16565b6000670de0b6b3a764000090506102226040518060400160405280600581526020017f74696d6573000000000000000000000000000000000000000000000000000000815250828461056a9092919063ffffffff16565b61024c827f000000000000000000000000000000000000000000000000000000000000000061059d565b9250505090565b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ec9061114e565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a27f77b7a960c5a6c84ace7f0e6ea4c247922bed85273a0bfec39b73075e195b277360065460405161038991906110b0565b60405180910390a181600681905550505050565b60006103a76105d4565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103ff91906111af565b60206040518083038186803b15801561041757600080fd5b505afa15801561042b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044f91906111df565b6040518363ffffffff1660e01b815260040161046c92919061120c565b602060405180830381600087803b15801561048657600080fd5b505af115801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104be919061126d565b6104fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f4906112e6565b60405180910390fd5b50565b60065481565b61050e610f3f565b610516610f3f565b61052d858585846105fe909392919063ffffffff16565b9150509392505050565b61054e8284608001516106ae90919063ffffffff16565b6105658184608001516106ae90919063ffffffff16565b505050565b6105818284608001516106ae90919063ffffffff16565b6105988184608001516106d390919063ffffffff16565b505050565b60006105cc600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484610780565b905092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610606610f3f565b610616856080015161010061084c565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b6106bb82600383516108b6565b6106ce8183610a3b90919063ffffffff16565b505050565b7fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000081121561070a576107058282610a5d565b61077c565b67ffffffffffffffff811315610729576107248282610ad4565b61077b565b600081126107425761073d826000836108b6565b61077a565b610779826001837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610774919061133f565b6108b6565b5b5b5b5050565b600080600454905060018161079591906113d3565b6004819055506000634042994660e01b60008087600001513089604001518760018c60800151600001516040516024016107d69897969594939291906114fd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905061084186838684610b20565b925050509392505050565b610854610fac565b600060208361086391906115b1565b1461088f5760208261087591906115b1565b602061088191906115e2565b8261088c91906113d3565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff16116108ed576108e78160058460ff16901b60ff161784610cc490919063ffffffff16565b50610a36565b60ff8167ffffffffffffffff16116109435761091c601860058460ff16901b1784610cc490919063ffffffff16565b5061093d8167ffffffffffffffff16600185610ce49092919063ffffffff16565b50610a35565b61ffff8167ffffffffffffffff161161099a57610973601960058460ff16901b1784610cc490919063ffffffff16565b506109948167ffffffffffffffff16600285610ce49092919063ffffffff16565b50610a34565b63ffffffff8167ffffffffffffffff16116109f3576109cc601a60058460ff16901b1784610cc490919063ffffffff16565b506109ed8167ffffffffffffffff16600485610ce49092919063ffffffff16565b50610a33565b610a10601b60058460ff16901b1784610cc490919063ffffffff16565b50610a318167ffffffffffffffff16600885610ce49092919063ffffffff16565b505b5b5b5b505050565b610a43610fac565b610a5583846000015151848551610d06565b905092915050565b610a7b60036005600660ff16901b1783610cc490919063ffffffff16565b50610ad082827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610aac919061133f565b604051602001610abc91906110b0565b604051602081830303815290604052610df5565b5050565b610af260026005600660ff16901b1783610cc490919063ffffffff16565b50610b1c8282604051602001610b0891906110b0565b604051602081830303815290604052610df5565b5050565b60003084604051602001610b359291906116cf565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b8152600401610c2b939291906116fb565b602060405180830381600087803b158015610c4557600080fd5b505af1158015610c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7d919061126d565b610cbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb3906117ab565b60405180910390fd5b949350505050565b610ccc610fac565b610cdc8384600001515184610e1a565b905092915050565b610cec610fac565b610cfd848560000151518585610e71565b90509392505050565b610d0e610fac565b8251821115610d1c57600080fd5b84602001518285610d2d91906113d3565b1115610d6257610d61856002610d5288602001518887610d4d91906113d3565b610eff565b610d5c91906117cb565b610f1b565b5b600080865180518760208301019350808887011115610d815787860182525b60208701925050505b60208410610dc85780518252602082610da391906113d3565b9150602081610db291906113d3565b9050602084610dc191906115e2565b9350610d8a565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b610e0282600283516108b6565b610e158183610a3b90919063ffffffff16565b505050565b610e22610fac565b83602001518310610e4857610e478460028660200151610e4291906117cb565b610f1b565b5b8351805160208583010184815381861415610e64576001820183525b5050508390509392505050565b610e79610fac565b84602001518483610e8a91906113d3565b1115610eb257610eb18560028685610ea291906113d3565b610eac91906117cb565b610f1b565b5b6000600183610100610ec49190611958565b610ece91906115e2565b90508551838682010185831982511617815281518588011115610ef15784870182525b505085915050949350505050565b600081831115610f1157829050610f15565b8190505b92915050565b600082600001519050610f2e838361084c565b50610f398382610a3b565b50505050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200160008152602001610fa6610fac565b81525090565b604051806040016040528060608152602001600081525090565b6000819050919050565b610fd981610fc6565b82525050565b6000602082019050610ff46000830184610fd0565b92915050565b600080fd5b61100881610fc6565b811461101357600080fd5b50565b60008135905061102581610fff565b92915050565b6000819050919050565b61103e8161102b565b811461104957600080fd5b50565b60008135905061105b81611035565b92915050565b6000806040838503121561107857611077610ffa565b5b600061108685828601611016565b92505060206110978582860161104c565b9150509250929050565b6110aa8161102b565b82525050565b60006020820190506110c560008301846110a1565b92915050565b600082825260208201905092915050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b60006111386028836110cb565b9150611143826110dc565b604082019050919050565b600060208201905081810360008301526111678161112b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111998261116e565b9050919050565b6111a98161118e565b82525050565b60006020820190506111c460008301846111a0565b92915050565b6000815190506111d981611035565b92915050565b6000602082840312156111f5576111f4610ffa565b5b6000611203848285016111ca565b91505092915050565b600060408201905061122160008301856111a0565b61122e60208301846110a1565b9392505050565b60008115159050919050565b61124a81611235565b811461125557600080fd5b50565b60008151905061126781611241565b92915050565b60006020828403121561128357611282610ffa565b5b600061129184828501611258565b91505092915050565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b60006112d06012836110cb565b91506112db8261129a565b602082019050919050565b600060208201905081810360008301526112ff816112c3565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061134a82611306565b915061135583611306565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156113905761138f611310565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156113c8576113c7611310565b5b828203905092915050565b60006113de8261102b565b91506113e98361102b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561141e5761141d611310565b5b828201905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61145e81611429565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561149e578082015181840152602081019050611483565b838111156114ad576000848401525b50505050565b6000601f19601f8301169050919050565b60006114cf82611464565b6114d9818561146f565b93506114e9818560208601611480565b6114f2816114b3565b840191505092915050565b600061010082019050611513600083018b6111a0565b611520602083018a6110a1565b61152d6040830189610fd0565b61153a60608301886111a0565b6115476080830187611455565b61155460a08301866110a1565b61156160c08301856110a1565b81810360e083015261157381846114c4565b90509998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115bc8261102b565b91506115c78361102b565b9250826115d7576115d6611582565b5b828206905092915050565b60006115ed8261102b565b91506115f88361102b565b92508282101561160b5761160a611310565b5b828203905092915050565b6000819050919050565b600061163b6116366116318461116e565b611616565b61116e565b9050919050565b600061164d82611620565b9050919050565b600061165f82611642565b9050919050565b60008160601b9050919050565b600061167e82611666565b9050919050565b600061169082611673565b9050919050565b6116a86116a382611654565b611685565b82525050565b6000819050919050565b6116c96116c48261102b565b6116ae565b82525050565b60006116db8285611697565b6014820191506116eb82846116b8565b6020820191508190509392505050565b600060608201905061171060008301866111a0565b61171d60208301856110a1565b818103604083015261172f81846114c4565b9050949350505050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b60006117956023836110cb565b91506117a082611739565b604082019050919050565b600060208201905081810360008301526117c481611788565b9050919050565b60006117d68261102b565b91506117e18361102b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561181a57611819611310565b5b828202905092915050565b60008160011c9050919050565b6000808291508390505b600185111561187c5780860481111561185857611857611310565b5b60018516156118675780820291505b808102905061187585611825565b945061183c565b94509492505050565b6000826118955760019050611951565b816118a35760009050611951565b81600181146118b957600281146118c3576118f2565b6001915050611951565b60ff8411156118d5576118d4611310565b5b8360020a9150848211156118ec576118eb611310565b5b50611951565b5060208310610133831016604e8410600b84101617156119275782820a90508381111561192257611921611310565b5b611951565b6119348484846001611832565b9250905081840481111561194b5761194a611310565b5b81810290505b9392505050565b60006119638261102b565b915061196e8361102b565b925061199b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611885565b90509291505056fe68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963656d756c746966756c6c3f6673796d733d455448267473796d733d555344a26469706673582212208793a1451d67efc38d19ea427969f53c1547cb2233e705ab66ec89da7737e3bb64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80631c365472146100515780634357855e1461006f5780638dc654a21461008b578063c618a1e414610095575b600080fd5b6100596100b3565b6040516100669190610fdf565b60405180910390f35b61008960048036038101906100849190611061565b610253565b005b61009361039d565b005b61009d610500565b6040516100aa91906110b0565b60405180910390f35b6000806100e87f000000000000000000000000000000000000000000000000000000000000000030634357855e60e01b610506565b905061014c6040518060400160405280600381526020017f67657400000000000000000000000000000000000000000000000000000000008152506040518060800160405280604981526020016119a460499139836105379092919063ffffffff16565b6101cb6040518060400160405280600481526020017f70617468000000000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f5241572c4554482c5553442c564f4c554d453234484f55520000000000000000815250836105379092919063ffffffff16565b6000670de0b6b3a764000090506102226040518060400160405280600581526020017f74696d6573000000000000000000000000000000000000000000000000000000815250828461056a9092919063ffffffff16565b61024c827f000000000000000000000000000000000000000000000000000000000000000061059d565b9250505090565b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ec9061114e565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a27f77b7a960c5a6c84ace7f0e6ea4c247922bed85273a0bfec39b73075e195b277360065460405161038991906110b0565b60405180910390a181600681905550505050565b60006103a76105d4565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103ff91906111af565b60206040518083038186803b15801561041757600080fd5b505afa15801561042b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044f91906111df565b6040518363ffffffff1660e01b815260040161046c92919061120c565b602060405180830381600087803b15801561048657600080fd5b505af115801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104be919061126d565b6104fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f4906112e6565b60405180910390fd5b50565b60065481565b61050e610f3f565b610516610f3f565b61052d858585846105fe909392919063ffffffff16565b9150509392505050565b61054e8284608001516106ae90919063ffffffff16565b6105658184608001516106ae90919063ffffffff16565b505050565b6105818284608001516106ae90919063ffffffff16565b6105988184608001516106d390919063ffffffff16565b505050565b60006105cc600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484610780565b905092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610606610f3f565b610616856080015161010061084c565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b6106bb82600383516108b6565b6106ce8183610a3b90919063ffffffff16565b505050565b7fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000081121561070a576107058282610a5d565b61077c565b67ffffffffffffffff811315610729576107248282610ad4565b61077b565b600081126107425761073d826000836108b6565b61077a565b610779826001837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610774919061133f565b6108b6565b5b5b5b5050565b600080600454905060018161079591906113d3565b6004819055506000634042994660e01b60008087600001513089604001518760018c60800151600001516040516024016107d69897969594939291906114fd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905061084186838684610b20565b925050509392505050565b610854610fac565b600060208361086391906115b1565b1461088f5760208261087591906115b1565b602061088191906115e2565b8261088c91906113d3565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff16116108ed576108e78160058460ff16901b60ff161784610cc490919063ffffffff16565b50610a36565b60ff8167ffffffffffffffff16116109435761091c601860058460ff16901b1784610cc490919063ffffffff16565b5061093d8167ffffffffffffffff16600185610ce49092919063ffffffff16565b50610a35565b61ffff8167ffffffffffffffff161161099a57610973601960058460ff16901b1784610cc490919063ffffffff16565b506109948167ffffffffffffffff16600285610ce49092919063ffffffff16565b50610a34565b63ffffffff8167ffffffffffffffff16116109f3576109cc601a60058460ff16901b1784610cc490919063ffffffff16565b506109ed8167ffffffffffffffff16600485610ce49092919063ffffffff16565b50610a33565b610a10601b60058460ff16901b1784610cc490919063ffffffff16565b50610a318167ffffffffffffffff16600885610ce49092919063ffffffff16565b505b5b5b5b505050565b610a43610fac565b610a5583846000015151848551610d06565b905092915050565b610a7b60036005600660ff16901b1783610cc490919063ffffffff16565b50610ad082827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610aac919061133f565b604051602001610abc91906110b0565b604051602081830303815290604052610df5565b5050565b610af260026005600660ff16901b1783610cc490919063ffffffff16565b50610b1c8282604051602001610b0891906110b0565b604051602081830303815290604052610df5565b5050565b60003084604051602001610b359291906116cf565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b8152600401610c2b939291906116fb565b602060405180830381600087803b158015610c4557600080fd5b505af1158015610c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7d919061126d565b610cbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb3906117ab565b60405180910390fd5b949350505050565b610ccc610fac565b610cdc8384600001515184610e1a565b905092915050565b610cec610fac565b610cfd848560000151518585610e71565b90509392505050565b610d0e610fac565b8251821115610d1c57600080fd5b84602001518285610d2d91906113d3565b1115610d6257610d61856002610d5288602001518887610d4d91906113d3565b610eff565b610d5c91906117cb565b610f1b565b5b600080865180518760208301019350808887011115610d815787860182525b60208701925050505b60208410610dc85780518252602082610da391906113d3565b9150602081610db291906113d3565b9050602084610dc191906115e2565b9350610d8a565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b610e0282600283516108b6565b610e158183610a3b90919063ffffffff16565b505050565b610e22610fac565b83602001518310610e4857610e478460028660200151610e4291906117cb565b610f1b565b5b8351805160208583010184815381861415610e64576001820183525b5050508390509392505050565b610e79610fac565b84602001518483610e8a91906113d3565b1115610eb257610eb18560028685610ea291906113d3565b610eac91906117cb565b610f1b565b5b6000600183610100610ec49190611958565b610ece91906115e2565b90508551838682010185831982511617815281518588011115610ef15784870182525b505085915050949350505050565b600081831115610f1157829050610f15565b8190505b92915050565b600082600001519050610f2e838361084c565b50610f398382610a3b565b50505050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200160008152602001610fa6610fac565b81525090565b604051806040016040528060608152602001600081525090565b6000819050919050565b610fd981610fc6565b82525050565b6000602082019050610ff46000830184610fd0565b92915050565b600080fd5b61100881610fc6565b811461101357600080fd5b50565b60008135905061102581610fff565b92915050565b6000819050919050565b61103e8161102b565b811461104957600080fd5b50565b60008135905061105b81611035565b92915050565b6000806040838503121561107857611077610ffa565b5b600061108685828601611016565b92505060206110978582860161104c565b9150509250929050565b6110aa8161102b565b82525050565b60006020820190506110c560008301846110a1565b92915050565b600082825260208201905092915050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b60006111386028836110cb565b9150611143826110dc565b604082019050919050565b600060208201905081810360008301526111678161112b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111998261116e565b9050919050565b6111a98161118e565b82525050565b60006020820190506111c460008301846111a0565b92915050565b6000815190506111d981611035565b92915050565b6000602082840312156111f5576111f4610ffa565b5b6000611203848285016111ca565b91505092915050565b600060408201905061122160008301856111a0565b61122e60208301846110a1565b9392505050565b60008115159050919050565b61124a81611235565b811461125557600080fd5b50565b60008151905061126781611241565b92915050565b60006020828403121561128357611282610ffa565b5b600061129184828501611258565b91505092915050565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b60006112d06012836110cb565b91506112db8261129a565b602082019050919050565b600060208201905081810360008301526112ff816112c3565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061134a82611306565b915061135583611306565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156113905761138f611310565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156113c8576113c7611310565b5b828203905092915050565b60006113de8261102b565b91506113e98361102b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561141e5761141d611310565b5b828201905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61145e81611429565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561149e578082015181840152602081019050611483565b838111156114ad576000848401525b50505050565b6000601f19601f8301169050919050565b60006114cf82611464565b6114d9818561146f565b93506114e9818560208601611480565b6114f2816114b3565b840191505092915050565b600061010082019050611513600083018b6111a0565b611520602083018a6110a1565b61152d6040830189610fd0565b61153a60608301886111a0565b6115476080830187611455565b61155460a08301866110a1565b61156160c08301856110a1565b81810360e083015261157381846114c4565b90509998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115bc8261102b565b91506115c78361102b565b9250826115d7576115d6611582565b5b828206905092915050565b60006115ed8261102b565b91506115f88361102b565b92508282101561160b5761160a611310565b5b828203905092915050565b6000819050919050565b600061163b6116366116318461116e565b611616565b61116e565b9050919050565b600061164d82611620565b9050919050565b600061165f82611642565b9050919050565b60008160601b9050919050565b600061167e82611666565b9050919050565b600061169082611673565b9050919050565b6116a86116a382611654565b611685565b82525050565b6000819050919050565b6116c96116c48261102b565b6116ae565b82525050565b60006116db8285611697565b6014820191506116eb82846116b8565b6020820191508190509392505050565b600060608201905061171060008301866111a0565b61171d60208301856110a1565b818103604083015261172f81846114c4565b9050949350505050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b60006117956023836110cb565b91506117a082611739565b604082019050919050565b600060208201905081810360008301526117c481611788565b9050919050565b60006117d68261102b565b91506117e18361102b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561181a57611819611310565b5b828202905092915050565b60008160011c9050919050565b6000808291508390505b600185111561187c5780860481111561185857611857611310565b5b60018516156118675780820291505b808102905061187585611825565b945061183c565b94509492505050565b6000826118955760019050611951565b816118a35760009050611951565b81600181146118b957600281146118c3576118f2565b6001915050611951565b60ff8411156118d5576118d4611310565b5b8360020a9150848211156118ec576118eb611310565b5b50611951565b5060208310610133831016604e8410600b84101617156119275782820a90508381111561192257611921611310565b5b611951565b6119348484846001611832565b9250905081840481111561194b5761194a611310565b5b81810290505b9392505050565b60006119638261102b565b915061196e8361102b565b925061199b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611885565b90509291505056fe68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963656d756c746966756c6c3f6673796d733d455448267473796d733d555344a26469706673582212208793a1451d67efc38d19ea427969f53c1547cb2233e705ab66ec89da7737e3bb64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/AnyApiTask.sol:AnyApiTask",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)974"
      },
      {
        "astId": 321,
        "contract": "contracts/AnyApiTask.sol:AnyApiTask",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 324,
        "contract": "contracts/AnyApiTask.sol:AnyApiTask",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1069"
      },
      {
        "astId": 327,
        "contract": "contracts/AnyApiTask.sol:AnyApiTask",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1149"
      },
      {
        "astId": 330,
        "contract": "contracts/AnyApiTask.sol:AnyApiTask",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 334,
        "contract": "contracts/AnyApiTask.sol:AnyApiTask",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2186,
        "contract": "contracts/AnyApiTask.sol:AnyApiTask",
        "label": "volume",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)974": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1069": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1149": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}